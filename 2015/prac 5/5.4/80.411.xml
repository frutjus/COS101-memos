<?xml version="1.0" encoding="ISO-8859-1"?>
<memo version='0.4'>
	<title>COS132_P5S1_printSeries(const double[][2], size_t)</title>
	<!-- Vreda -->
	<config>
		<random>0</random>
		<sequence>1</sequence>
		<parts>1</parts>
		<chances>10</chances> 
	</config>

<output part='1' fullmarks='6'> 
			
	<delete-patterns>
		<pattern>.+\.o$</pattern>
		<pattern>.+~$</pattern>
	</delete-patterns>
	
	<source-patterns>
		<pattern>.+\.cpp$</pattern>
	</source-patterns>

	<extra-files>
		<file overwrite='true' jail='true'>driver-printSeries2D.cpp</file>
		<file overwrite='true' jail='true'>makefile</file>
		<file overwrite='true' jail='true'>series.h</file>
		<file overwrite='true' jail='true'>input4.txt</file>
		<file overwrite='true' jail='true'>input1.txt</file>
		<file overwrite='true' jail='true'>input0.txt</file>
	</extra-files>

	<case id='1'>
		<!-- Test for vertical alignment and separator line -->
		<arguments>
			<arg file='true' input='true'>input4.txt</arg>
		</arguments>
		<line>
			<regexp
			successMessage="XXX: printSeries(v[][2], size_t) NOT PRINTING ON THE CURRENT LINE. PLEASE FIX BEFORE PAYING ATTENTION TO ANY FURTHER FEEDBACK" 
			>A{6}$</regexp></line>
		<line><alt>
			<regexp mark = "2" 
			successMessage = "WOW!: Lines to seperate fractions are exactly as specified."
			>\s*-{8}( \+ -{8}){3}$</regexp>
			<regexp mark = "2" 
			>\s*-{6,10}(\s+\+\s+\-{6,10}){2,4}$</regexp>
			<regexp mark = "1" 
			successMessage = "OK: Lines to seperate fractions"
			errorMessage = "X: The lines to separate fractions are not as specified or not in the right place"
			>\s*-{6,10}(\s+\+\s+\-{6,10}){2,4}</regexp>
		</alt></line>
	</case>
	
	<case id='2'>
		<!-- first four elements of  {{5,1},{-1,1},{1,3},{3,6},{9,9}} should be printed -->
		<arguments>
			<arg file='true' input='true'>input4.txt</arg>
		</arguments>
		<alt><line>
			<regexp mark='2' 
			successMessage="OK: printSeries(v[][2], size_t) displays numerators correctly" 
			>5\s+-1\s+1\s+3$</regexp></line>
			
			<line><regexp
			successMessage="X: printSeries(v[], size_t) may be off-by-one" 
			>9</regexp></line>
	
			<line><regexp
			errorMessage="X: printSeries(v[], size_t) may be off-by-one" 
			>3</regexp></line>
		</alt>
		<line><regexp>.*</regexp></line>
		<alt>
			<line><regexp mark='1' 
			successMessage="OK: printSeries(v[][2], size_t) displays denominators correctly" 
			>1\s+1\s+3\s+6$</regexp></line>
			
			<line><regexp
			successMessage="X: printSeries(v[], size_t) may be off-by-one" 
			>9</regexp></line>
	
			<line><regexp
			errorMessage="X: printSeries(v[], size_t) may be off-by-one" 
			>6</regexp></line>
		</alt>
	</case>

	<case id='3'>
		<!-- only first elements of  {{5,1},{-1,1},{1,3},{3,6},{9,9}} should be printed -->
		<arguments>
			<arg file='true' input='true'>input1.txt</arg>
		</arguments>
		<line><regexp mark='2' 
			successMessage="OK: numerator displayed by printSeries(const double[][2], size_t) when printing 1 term" 
			errorMessage="X: numerator displayed by printSeries(const double[][2], size_t) when printing 1 term FAIL"
			>A{6}\s+5$</regexp> </line>
		<line><regexp
			successMessage="X: stray + sign detected" 
			>\+</regexp> </line>
		<alt>
			<line><regexp mark='2' 
			successMessage="OK: denomitor displayed by printSeries(const double[][2], size_t) when printing 1 term" 
			errorMessage="X: denomitor displayed by printSeries(const double[][2], size_t) when printing 1 term FAIL"
			>\s*1$</regexp></line>
			
			<line><regexp mark='1' 
			successMessage="X: printSeries(v[][2], size_t) should end with a \\n or endl"
			>\s*1H{6}</regexp></line> 
		</alt>
	</case>

	<case id='4'>
		<!-- When array size is zero nothing should be printed -->
		<arguments>
			<arg file='true' input='true'>input0.txt</arg>
		</arguments>
		<alt>
			<line><regexp mark='1' 
				successMessage="OK: printSeries(const double[][2], size_t) when series is empty" 
				errorMessage="X: printSeries(const double[][2], size_t) fails when series is empty"
				>A{6}H{6}</regexp> </line>
		</alt>
	</case>
</output>
</memo>
