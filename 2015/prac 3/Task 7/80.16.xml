<?xml version="1.0" encoding="ISO-8859-1"?>

<memo version='0.4'>
	<title>Prac3_InsuranceClaims</title>
	
	<config>
		<random>0</random>
		<sequence>1</sequence>
		<parts>1</parts>
		<chances>10</chances> 
	</config>
	
	<output part='1' fullmarks='10'>
		<executable>claims.out</executable>
				
		<delete-patterns>
			<pattern>.+\.o$</pattern>
			<pattern>.+~$</pattern>
		</delete-patterns>
		
		<source-patterns>
			<pattern>.+\.cpp$</pattern>
		</source-patterns>
		
		<extra-files>
			<file overwrite='true' jail='true'>makefile</file>
			<file overwrite='true' jail='true'>blue.txt</file>
			<file overwrite='true' jail='true'>red.txt</file>
			<file overwrite='true' jail='true'>white.txt</file>
			<file overwrite='true' jail='true'>invalid.txt</file>
			<file overwrite='true' jail='true'>claims.dat</file>
			<file overwrite='true' jail='true'>5enters.txt</file>
		</extra-files> 

		<!-- Menu display as prescribed -->
		<case id='1'>
			<arguments>
				<arg file='true' input='true'>white.txt</arg>
			</arguments>
			<line><regexp mark = '1' successMessage = "OK: First line of the menu"
			errorMessage = "X: First line of the menu is not as prescribed">^1\.\s+[Bb]lue\s+cars\.?$</regexp></line>
			<line><regexp mark = '1' successMessage = "OK: Second line of the menu"
			errorMessage = "X: Second line of the menu is not as prescribed">^2\.\s+[Ww]hite\s+cars\.?$</regexp></line>
			<line><regexp mark = '1' successMessage="OK: Third line of the menu"
			errorMessage = "X: Third line of the menu is not as prescribed">^3\.\s+[Rr]ed\s+cars\.?$</regexp></line>
			<line><regexp mark = '1' successMessage="OK: Fourth line of the menu"
			errorMessage = "X: Fourth line of the menu is not as prescribed">^4\.\s+[Qq]uit\.?$</regexp></line>
			<line><regexp mark = '1' successMessage="OK: Prompt line after the menu"
			errorMessage = "X: Prompt line after the menu is not as prescribed - it should end with a colon and a space">^[Ee]nter.*:\s+</regexp></line>
		</case>
		
		
		<!-- Line of dashes after menu and before results -->		
		<case id='2'>
			<arguments>
				<arg file='true' input='true'>white.txt</arg>
			</arguments>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp successMessage="OK: Line of dashes after menu and before results"
			errorMessage = "XXX: Line of dashes after menu and before results not in the right place - ALL FURTHER FEEDBACK MAY BE INCORRECT AS IT IS LOOKING FOR OUTPUT ON THE WRONG LINES"
			>.*-{20}</regexp></line>
		</case>			

		<!-- Final output line  -->
		<case id='3'>
			<arguments>
				<arg file='true' input='true'>blue.txt</arg>
			</arguments>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp successMessage="OK: Line of dashes after the results"
			errorMessage = "XXX: Line of dashes after results not in the right place - FEEDBACK REGARDING LOOPING BACK MAY BE INCORRECT"
			>.*-{20}</regexp></line>
		</case>
		
		<!-- Loop back to Menu after output  -->
		<case id='4'>
			<arguments>
				<arg file='true' input='true'>blue.txt</arg>
			</arguments>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp mark = '2' successMessage="OK: Loop back to menu after reporting found!"
			errorMessage = "X: Could not recognise the menu after the reporting part of your program" >^1\.\s+[Bb]lue\s+cars\.?$</regexp></line>
		</case>

		<!-- Loop back to Menu after invalid choice  -->
		<case id='5'>
			<arguments>
				<arg file='true' input='true'>invalid.txt</arg>
			</arguments>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp mark = '2' successMessage="OK: Loop back to menu after an invalid choice was made found!"
			errorMessage = "X: Could not recognise the menu after an invalid choice was made" >^1\.\s+[Bb]lue\s+cars\.?$</regexp></line>
		</case>

		<!-- The output regarding white cars  shows the colour-->
		<case id='6'>
			<arguments>
				<arg file='true' input='true'>white.txt</arg>
			</arguments>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line>
				<regexp mark = "1"  successMessage = "OK: Message to report the number of cars"
				errorMessage = "X: Message to report the number of cars should contain the selected colour"
				>\s[Ww]hite\s</regexp>
			</line>
			<line>
				<regexp mark = "1" successMessage = "OK: Message to report the total amount of claims"
				errorMessage = "X: Message to report the total amount of claims should contain the selected colour"
				>\s[Ww]hite\s</regexp>
			</line>
			<line>
				<regexp mark = "1" successMessage = "OK: Message to report the average amount of claims"
				errorMessage = "X: Message to report the average amount of claims should contain the selected colour"
				>\s[Ww]hite\s</regexp>
			</line>
		</case>
		
		<!-- Numeric output regarding white cars  -->
		<case id='7'>
			<arguments>
				<arg file='true' input='true'>white.txt</arg>
			</arguments>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line>
				<regexp mark = "3" successMessage = "OK: The number of cars counted correctly"
				errorMessage = "X: The number of cars NOT counted correctly"
				>\D3\D</regexp>
			</line>
			<line>
				<regexp mark = "3" successMessage = "OK: The total amount of claims summed correctly"
				errorMessage = "X: The total amount of claims NOT summed correctly"
				>\D326\.43$</regexp>
			</line>
			<line>
				<regexp mark = "3" successMessage = "OK: The average amount of claims calculated correctly"
				errorMessage = "X: The average amount of claims NOT calculated correctly"
				>\D108\.81$</regexp>
			</line>
		</case>

		<!-- Numeric output regarding red cars  -->

		<case id='8'>
			<arguments>
				<arg file='true' input='true'>red.txt</arg>
			</arguments>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line>
				<regexp mark = "1" successMessage = "OK: The number of cars counted correctly"
				errorMessage = "X: The number of cars NOT counted correctly - make sure that you do not miss the first and/or the last entry"
				>\D6\D</regexp>
			</line>
			<line>
				<regexp mark = "1" successMessage = "OK: The total amount of claims summed correctly"
				errorMessage = "X: The total amount of claims NOT summed correctly"
				>\D550\.36$</regexp>
			</line>
			<line><alt>
				<regexp errorMessage = "X: The average amount of claims NOT calculated correctly">\D91\.7(\d){1,3}$</regexp>
				<regexp mark = "3" successMessage = "OK: The average amount of claims calculated and formatted correctly"
				>\D91\.73$</regexp>
				<regexp mark = "1" successMessage = "OK: The average amount of claims calculated correctly but not rounded to the nearest cent"
				>\D91\.7267$</regexp>
			</alt></line>
		</case>


		<!-- Numeric output regarding blue cars  -->
		<case id='9'>
			<arguments>
				<arg file='true' input='true'>blue.txt</arg>
			</arguments>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line><regexp>.*</regexp></line>
			<line>
				<regexp mark = "1" successMessage = "OK: The number of cars counted correctly"
				errorMessage = "X: The number of cars NOT counted correctly in a case where there are no claims"
				>\D0\D</regexp>
			</line>
			<line>
				<regexp mark = "2" successMessage = "OK: Currency symbol and output spacing correct"
				errorMessage = "X: Output format of currencies does not match the template  R #.##"
				>\sR 0.00$</regexp>
			</line>
			<line>
				<regexp mark = "1" successMessage = "OK: Program behaves correctly in a case where there are no claims"
				errorMessage = "X: Program ignores the possibility that the denominator can be zero when calcualting the avarage"
				>\sR 0.00$</regexp>
			</line>
		</case>
		

		
	</output>
</memo>


